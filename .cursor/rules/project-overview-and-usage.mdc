---
description: 
globs: .ts,.json,.md
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# Project overview

Voltage is a typescript analytics schema & tracking validation package.

## High-level usage

Webapps using voltage will organize all of their analytics events into JSON schema files that represent all of the analytics data collected by the app.

Developers of the webapp can run ```npm voltage generate``` to generate typescript types & tracking configuration. The generated types & tracking configuration are used to compose a typesafe analytics tracker.

Here is a basic setup:

**analytics.config.json**

```json
{
  "version": "1.0.0",
  "generates": [
    {
      "events": "./analytics.events.json",
      "dimensions": ["./analytics.all-dimensions.json"],
      "groups": ["./analytics.all-groups.json"],
      "output": "./__analytics_generated__/analytics.ts"
    }
  ]
}
```

**analytics.all-groups.json**

```json
{
  "groups": [
    {
      "name": "Global",
      "description": "Properties that get sent with every event.",
      "properties": [
        {
          "name": "Url",
          "description": "The URL of the page when the event was triggered.",
          "type": "string"
        },
        {
          "name": "User Agent",
          "description": "The user agent string of the user that triggered the event.",
          "type": "string"
        }
      ]
    },
    {
      "name": "User",
      "description": "Users who have an account on our platform.",
      "identifiedBy": "UserID",
      "properties": [
        {
          "name": "UserID",
          "description": "The ID of the user that triggered the event.",
          "type": "string"
        },
        {
          "name": "roles",
          "description": "The roles of the user that triggered the event.",
          "type": "string[]"
        },
        {
          "name": "job",
          "description": "The job role of the user that triggered the event.",
          "type": "string"
        },
        {
          "name": "invited",
          "description": "Whether or not the user that triggered the event was invited by another user.",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "Team",
      "description": "The team of the user that triggered the event.",
      "identifiedBy": "TeamID",
      "properties": [
        {
          "name": "TeamID",
          "description": "The ID of the team of the user that triggered the event.",
          "type": "number"
        },
        {
          "name": "Plan",
          "description": "The plan of the team of the user that triggered the event.",
          "type": "string"
        }
      ]
    }
  ]
}
```

**analytics.all-dimensions.json**

```json
{
  "dimensions": [
    {
      "name": "Free",
      "description": "Teams without a paid plan.",
      "identifiers": {
        "OR": [
          {
            "property": "Plan",
            "group": "Team",
            "equals": "FREE"
          },
          {
            "property": "Plan",
            "group": "Team",
            "equals": "TRIAL"
          }
        ]
      }
    },
    {
      "name": "Paid",
      "description": "Teams with a paid plan.",
      "identifiers": {
        "AND": [
          {
            "property": "Plan",
            "group": "Team",
            "not": "FREE"
          },
          {
            "property": "Plan",
            "group": "Team",
            "not": "TRIAL"
          }
        ]
      }
    }
  ]
}
```

**analytics.events.json**

```json
{
  "events": {
    "page_view": {
      "name": "Page View",
      "dimensions": ["Free", "Paid"],
      "properties": [
        {
          "name": "page_title",
          "type": "string"
        }
      ]
    },
    "button_click": {
      "name": "Button Click",
      "dimensions": ["Free", "Paid"],
      "properties": [
        {
          "name": "button_id",
          "type": "string"
        },
        {
          "name": "button_text",
          "type": "string"
        }
      ]
    }
  }
}
```

**tracker.ts**

```typescript
import { AnalyticsTracker, TrackerEvents, TrackerOptions, ValidatedProperties, trackingConfig } from './__analytics_generated__/analytics';
import { createAnalyticsTracker } from 'voltage';

// Create a tracker instance
const tracker: AnalyticsTracker<TrackerEvents> = createAnalyticsTracker<TrackerEvents>(trackingConfig, {
  /*
  * Args:
  *   eventName = name of event from analytics event schema (ex - "Page view")
  *   eventProperties = properties for the event from analytics event schema
  *   groupProperties = properties set on the tracker for a group from analytics globals schema
  */
  onEventTracked: async (eventName: string, eventProperties: ValidatedProperties, groupProperties: ValidatedProperties) => {
    // call analytics library
  },

  /*
  * Args:
  *   groupName = name of group (ex - "User")
  *   groupIdentifier = value for current user (ex - "user_123")
  *   properties = properties / traits for the group from analytics globals schema
  */
  onGroupUpdate: async (groupName: string, properties: ValidatedProperties) => {
    // call analytics library
  },
} as TrackerOptions<TrackerEvents>);

/*
* Sets properties to be tracked with every event.
* The types for the argument come from the analytics globals schema's top-level "properties" field.
*/
tracker.setProperties('Global', {
  "Url": () => window.location.href,
  "User Agent": navigator.userAgent,
});

/*
* Track a page view event.
* The 1st eventKey argument has typeahead auto-fill results generated by typescript.
* The types for the properties come from the event for the selected eventKey from the analytics events schema.
*/
tracker.track('page_view', {
  page_title: 'Home Page',
});

/*
* Identifies the user & sets user properties.
* The 1st groupName argument has typeahead auto-fill results generated by typescript.
* The types for the properties argument come from the "User" group from the analytics globals schema.
*/
tracker.setProperties('User', {
  UserID: 123,
  roles: ['admin', 'editor'],
  job: 'Developer',
  invited: false,
});
```

## Analytics Vendor Support

The "createAnalyticsTracker" function is designed to be agnostic of the analytics vendor that the webapp uses. With just a few lines, a tracker can be integrated with major analytics libraries, such as amplitude, posthog, and segment.

Error handling, persisted state management, and all of the fun stuff traditionally associated with analytics tracker libraries are not problems that voltage has to worry about. All that voltage provides is the analytics schema, a cli toolkit, and a tracker that provides typesafety when tracking events, identifying groups, and setting global properties. Runtime validation is not needed either because of the type safety provided. All other analytics related problems are to be delegated to the analytics tracking package that voltage interfaces with.
